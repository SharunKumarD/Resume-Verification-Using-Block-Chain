{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _isInBrowser = require('is-in-browser');\nvar _isInBrowser2 = _interopRequireDefault(_isInBrowser);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\nvar js = ''; /**\r\n              * Export javascript style and css style vendor prefixes.\r\n              * Based on \"transform\" support test.\r\n              */\n\nvar css = '';\n\n// We should not do anything if required serverside.\nif (_isInBrowser2['default']) {\n  // Order matters. We need to check Webkit the last one because\n  // other vendors use to add Webkit prefixes to some properties\n  var jsCssMap = {\n    Moz: '-moz-',\n    // IE did it wrong again ...\n    ms: '-ms-',\n    O: '-o-',\n    Webkit: '-webkit-'\n  };\n  var style = document.createElement('p').style;\n  var testProp = 'Transform';\n  for (var key in jsCssMap) {\n    if (key + testProp in style) {\n      js = key;\n      css = jsCssMap[key];\n      break;\n    }\n  }\n}\n\n/**\r\n * Vendor prefix string for the current browser.\r\n *\r\n * @type {{js: String, css: String}}\r\n * @api public\r\n */\nexports['default'] = {\n  js: js,\n  css: css\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","_isInBrowser","require","_isInBrowser2","_interopRequireDefault","obj","__esModule","js","css","jsCssMap","Moz","ms","O","Webkit","style","document","createElement","testProp","key"],"sources":["C:/Users/adity/Desktop/D/extra/Blockchain/abc/ResumeVerificationUsingBlockchain/client/node_modules/css-vendor/lib/prefix.js"],"sourcesContent":["'use strict';\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _isInBrowser = require('is-in-browser');\r\n\r\nvar _isInBrowser2 = _interopRequireDefault(_isInBrowser);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\r\n\r\nvar js = ''; /**\r\n              * Export javascript style and css style vendor prefixes.\r\n              * Based on \"transform\" support test.\r\n              */\r\n\r\nvar css = '';\r\n\r\n// We should not do anything if required serverside.\r\nif (_isInBrowser2['default']) {\r\n  // Order matters. We need to check Webkit the last one because\r\n  // other vendors use to add Webkit prefixes to some properties\r\n  var jsCssMap = {\r\n    Moz: '-moz-',\r\n    // IE did it wrong again ...\r\n    ms: '-ms-',\r\n    O: '-o-',\r\n    Webkit: '-webkit-'\r\n  };\r\n  var style = document.createElement('p').style;\r\n  var testProp = 'Transform';\r\n\r\n  for (var key in jsCssMap) {\r\n    if (key + testProp in style) {\r\n      js = key;\r\n      css = jsCssMap[key];\r\n      break;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Vendor prefix string for the current browser.\r\n *\r\n * @type {{js: String, css: String}}\r\n * @api public\r\n */\r\nexports['default'] = { js: js, css: css };"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AAEF,IAAIC,YAAY,GAAGC,OAAO,CAAC,eAAe,CAAC;AAE3C,IAAIC,aAAa,GAAGC,sBAAsB,CAACH,YAAY,CAAC;AAExD,SAASG,sBAAsB,CAACC,GAAG,EAAE;EAAE,OAAOA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAGD,GAAG,GAAG;IAAE,SAAS,EAAEA;EAAI,CAAC;AAAE;AAEhG,IAAIE,EAAE,GAAG,EAAE,CAAC,CAAC;AACb;AACA;AACA;;AAEA,IAAIC,GAAG,GAAG,EAAE;;AAEZ;AACA,IAAIL,aAAa,CAAC,SAAS,CAAC,EAAE;EAC5B;EACA;EACA,IAAIM,QAAQ,GAAG;IACbC,GAAG,EAAE,OAAO;IACZ;IACAC,EAAE,EAAE,MAAM;IACVC,CAAC,EAAE,KAAK;IACRC,MAAM,EAAE;EACV,CAAC;EACD,IAAIC,KAAK,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC,CAACF,KAAK;EAC7C,IAAIG,QAAQ,GAAG,WAAW;EAE1B,KAAK,IAAIC,GAAG,IAAIT,QAAQ,EAAE;IACxB,IAAIS,GAAG,GAAGD,QAAQ,IAAIH,KAAK,EAAE;MAC3BP,EAAE,GAAGW,GAAG;MACRV,GAAG,GAAGC,QAAQ,CAACS,GAAG,CAAC;MACnB;IACF;EACF;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACAnB,OAAO,CAAC,SAAS,CAAC,GAAG;EAAEQ,EAAE,EAAEA,EAAE;EAAEC,GAAG,EAAEA;AAAI,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}
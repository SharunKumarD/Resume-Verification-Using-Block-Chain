{"ast":null,"code":"const getHeader = {\n  headers: {\n    Accept: \"application/json\"\n  }\n};\nconst postHeader = {\n  method: \"POST\",\n  headers: {\n    ...getHeader,\n    \"Content-Type\": \"application/json\"\n  }\n};\nlet host = \"\";\nif (process.env.NODE_ENV !== \"production\") host = \"http://localhost:3000\";\nexport const getCertificate = certificateId => fetch(`${host}/certificate/data/${certificateId}`, getHeader).then(res => res.json()).catch(err => {\n  console.log(err);\n});\nexport const verifyCertificate = certificateId => fetch(`${host}/certificate/verify/${certificateId}`, getHeader).then(res => {\n  if (res.status === 200) return true;else if (res.status === 401) return false;\n}).catch(err => {\n  console.log(err);\n});\nexport const generateCertificate = (candidateName, courseName, orgName, assignDate, duration, emailId) =>\n// console.log(\"Hello\");\nfetch(`${host}/certificate/generate`, {\n  ...postHeader,\n  body: JSON.stringify({\n    candidateName,\n    courseName,\n    orgName,\n    assignDate,\n    duration,\n    emailId\n  })\n}).then(res => res.json()).catch(err => {\n  console.log(err);\n});\nexport const login = (UserName, Password) => {\n  fetch(`${host}/certificate/generate`, {\n    ...postHeader,\n    body: JSON.stringify({\n      UserName,\n      Password\n    })\n  }).then(res => res.json()).catch(err => {\n    console.log(err);\n  });\n};","map":{"version":3,"names":["getHeader","headers","Accept","postHeader","method","host","process","env","NODE_ENV","getCertificate","certificateId","fetch","then","res","json","catch","err","console","log","verifyCertificate","status","generateCertificate","candidateName","courseName","orgName","assignDate","duration","emailId","body","JSON","stringify","login","UserName","Password"],"sources":["C:/Users/adity/Desktop/D/extra/Blockchain/blockchain-certification/newnew/client/src/Utils/apiConnect.js"],"sourcesContent":["const getHeader = {\r\n  headers: {\r\n    Accept: \"application/json\"\r\n  }\r\n};\r\n\r\nconst postHeader = {\r\n  method: \"POST\",\r\n  headers: {\r\n    ...getHeader,\r\n    \"Content-Type\": \"application/json\"\r\n  }\r\n};\r\n\r\nlet host = \"\";\r\n\r\nif (process.env.NODE_ENV !== \"production\") host = \"http://localhost:3000\";\r\n\r\nexport const getCertificate = certificateId =>\r\n  fetch(`${host}/certificate/data/${certificateId}`, getHeader)\r\n    .then(res => res.json())\r\n    .catch(err => {\r\n      console.log(err);\r\n    });\r\n\r\nexport const verifyCertificate = certificateId =>\r\n  fetch(`${host}/certificate/verify/${certificateId}`, getHeader)\r\n    .then(res => {\r\n      if (res.status === 200) return true;\r\n      else if (res.status === 401) return false;\r\n    })\r\n    .catch(err => {\r\n      console.log(err);\r\n    });\r\n\r\nexport const generateCertificate = (\r\n  candidateName,\r\n  courseName,\r\n  orgName,\r\n  assignDate,\r\n  duration,\r\n  emailId\r\n) =>\r\n// console.log(\"Hello\");\r\n  fetch(`${host}/certificate/generate`, {\r\n    ...postHeader,\r\n    body: JSON.stringify({\r\n      candidateName,\r\n      courseName,\r\n      orgName,\r\n      assignDate,\r\n      duration,\r\n      emailId\r\n    })\r\n  })\r\n    .then(res => res.json())\r\n    .catch(err => {\r\n      console.log(err);\r\n    });\r\n\r\n\r\n    export const login =(UserName,Password) =>\r\n    {\r\n      fetch(`${host}/certificate/generate`, {\r\n        ...postHeader,\r\n        body: JSON.stringify({\r\n          UserName,\r\n          Password\r\n        })\r\n      })\r\n        .then(res => res.json())\r\n        .catch(err => {\r\n          console.log(err);\r\n        });\r\n    }"],"mappings":"AAAA,MAAMA,SAAS,GAAG;EAChBC,OAAO,EAAE;IACPC,MAAM,EAAE;EACV;AACF,CAAC;AAED,MAAMC,UAAU,GAAG;EACjBC,MAAM,EAAE,MAAM;EACdH,OAAO,EAAE;IACP,GAAGD,SAAS;IACZ,cAAc,EAAE;EAClB;AACF,CAAC;AAED,IAAIK,IAAI,GAAG,EAAE;AAEb,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAEH,IAAI,GAAG,uBAAuB;AAEzE,OAAO,MAAMI,cAAc,GAAGC,aAAa,IACzCC,KAAK,CAAE,GAAEN,IAAK,qBAAoBK,aAAc,EAAC,EAAEV,SAAS,CAAC,CAC1DY,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,EAAE,CAAC,CACvBC,KAAK,CAACC,GAAG,IAAI;EACZC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;AAClB,CAAC,CAAC;AAEN,OAAO,MAAMG,iBAAiB,GAAGT,aAAa,IAC5CC,KAAK,CAAE,GAAEN,IAAK,uBAAsBK,aAAc,EAAC,EAAEV,SAAS,CAAC,CAC5DY,IAAI,CAACC,GAAG,IAAI;EACX,IAAIA,GAAG,CAACO,MAAM,KAAK,GAAG,EAAE,OAAO,IAAI,CAAC,KAC/B,IAAIP,GAAG,CAACO,MAAM,KAAK,GAAG,EAAE,OAAO,KAAK;AAC3C,CAAC,CAAC,CACDL,KAAK,CAACC,GAAG,IAAI;EACZC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;AAClB,CAAC,CAAC;AAEN,OAAO,MAAMK,mBAAmB,GAAG,CACjCC,aAAa,EACbC,UAAU,EACVC,OAAO,EACPC,UAAU,EACVC,QAAQ,EACRC,OAAO;AAET;AACEhB,KAAK,CAAE,GAAEN,IAAK,uBAAsB,EAAE;EACpC,GAAGF,UAAU;EACbyB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;IACnBR,aAAa;IACbC,UAAU;IACVC,OAAO;IACPC,UAAU;IACVC,QAAQ;IACRC;EACF,CAAC;AACH,CAAC,CAAC,CACCf,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,EAAE,CAAC,CACvBC,KAAK,CAACC,GAAG,IAAI;EACZC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;AAClB,CAAC,CAAC;AAGF,OAAO,MAAMe,KAAK,GAAE,CAACC,QAAQ,EAACC,QAAQ,KACtC;EACEtB,KAAK,CAAE,GAAEN,IAAK,uBAAsB,EAAE;IACpC,GAAGF,UAAU;IACbyB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACnBE,QAAQ;MACRC;IACF,CAAC;EACH,CAAC,CAAC,CACCrB,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,EAAE,CAAC,CACvBC,KAAK,CAACC,GAAG,IAAI;IACZC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;EAClB,CAAC,CAAC;AACN,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}